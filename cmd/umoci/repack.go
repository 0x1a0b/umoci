/*
 * umoci: Umoci Modifies Open Containers' Images
 * Copyright (C) 2016 SUSE LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package main

import (
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/Sirupsen/logrus"
	"github.com/cyphar/umoci/image/cas"
	igen "github.com/cyphar/umoci/image/generator"
	"github.com/cyphar/umoci/image/layer"
	"github.com/opencontainers/image-spec/specs-go/v1"
	"github.com/pkg/errors"
	"github.com/urfave/cli"
	"github.com/vbatts/go-mtree"
	"golang.org/x/net/context"
)

var repackCommand = uxHistory(cli.Command{
	Name:  "repack",
	Usage: "repacks an OCI runtime bundle into a reference",
	ArgsUsage: `--image <image-path>[:<new-tag>] <bundle>

Where "<image-path>" is the path to the OCI image, "<new-tag>" is the name of
the tag that the new image will be saved as (if not specified, defaults to
"latest"), and "<bundle>" is the bundle from which to generate the required
layers.

The "<image-path>" MUST be the same image that was used to create "<bundle>"
(using umoci-unpack(1)). Otherwise umoci will not be able to modify the
original manifest to add the diff layer.

All uid-map and gid-map settings are automatically loaded from the bundle
metadata (which is generated by umoci-unpack(1)) so if you unpacked an image
using a particular mapping then the same mapping will be used to generate the
new layer.

It should be noted that this is not the same as oci-create-layer because it
uses go-mtree to create diff layers from runtime bundles unpacked with
umoci-unpack(1). In addition, it modifies the layout so that all of the relevant
manifest and configuration information uses the new diff atop the old manifest.`,

	// repack creates a new image, with a given tag.
	Category: "image",

	Action: repack,

	Before: func(ctx *cli.Context) error {
		if ctx.NArg() != 1 {
			return errors.Errorf("invalid number of positional arguments: expected <bundle>")
		}
		if ctx.Args().First() == "" {
			return errors.Errorf("bundle path cannot be empty")
		}
		ctx.App.Metadata["bundle"] = ctx.Args().First()
		return nil
	},
})

func repack(ctx *cli.Context) error {
	imagePath := ctx.App.Metadata["--image-path"].(string)
	tagName := ctx.App.Metadata["--image-tag"].(string)
	bundlePath := ctx.App.Metadata["bundle"].(string)

	// Read the metadata first.
	meta, err := ReadBundleMeta(bundlePath)
	if err != nil {
		return errors.Wrap(err, "read umoci.json metadata")
	}

	logrus.WithFields(logrus.Fields{
		"version":     meta.Version,
		"from":        meta.From,
		"map_options": meta.MapOptions,
	}).Debugf("umoci: loaded UmociMeta metadata")

	// FIXME: Implement support for manifest lists.
	if meta.From.MediaType != v1.MediaTypeImageManifest {
		return errors.Wrap(fmt.Errorf("descriptor does not point to v1.MediaTypeImageManifest: not implemented: %s", meta.From.MediaType), "invalid saved from descriptor")
	}

	// Get a reference to the CAS.
	engine, err := cas.Open(imagePath)
	if err != nil {
		return errors.Wrap(err, "open CAS")
	}
	defer engine.Close()

	mtreeName := strings.Replace(meta.From.Digest, "sha256:", "sha256_", 1)
	mtreePath := filepath.Join(bundlePath, mtreeName+".mtree")
	fullRootfsPath := filepath.Join(bundlePath, layer.RootfsName)

	logrus.WithFields(logrus.Fields{
		"layout": imagePath,
		"bundle": bundlePath,
		"rootfs": layer.RootfsName,
		"mtree":  mtreePath,
	}).Debugf("umoci: repacking OCI layout")

	mfh, err := os.Open(mtreePath)
	if err != nil {
		return errors.Wrap(err, "open mtree")
	}
	defer mfh.Close()

	spec, err := mtree.ParseSpec(mfh)
	if err != nil {
		return errors.Wrap(err, "parse mtree")
	}

	keywords := spec.UsedKeywords()

	logrus.WithFields(logrus.Fields{
		"keywords": keywords,
	}).Debugf("umoci: parsed mtree spec")

	diffs, err := mtree.Check(fullRootfsPath, spec, keywords, meta.MapOptions.Rootless)
	if err != nil {
		return errors.Wrap(err, "check mtree")
	}

	logrus.WithFields(logrus.Fields{
		"ndiff": len(diffs),
	}).Debugf("umoci: checked mtree spec")

	reader, err := layer.GenerateLayer(fullRootfsPath, diffs, &meta.MapOptions)
	if err != nil {
		return errors.Wrap(err, "generate diff layer")
	}
	defer reader.Close()

	// XXX: I get the feeling all of this should be moved to a separate package
	//      which abstracts this nicely.

	// We need to store the gzip'd layer (which has a blob digest) but we also
	// need to grab the diffID (which is the digest of the *uncompressed*
	// layer). But because we have a Reader from GenerateLayer() we need to use
	// a goroutine.
	// FIXME: This is all super-ugly.

	diffIDHash := sha256.New()
	hashReader := io.TeeReader(reader, diffIDHash)

	pipeReader, pipeWriter := io.Pipe()
	defer pipeReader.Close()

	gzw := gzip.NewWriter(pipeWriter)
	defer gzw.Close()
	go func() {
		_, err := io.Copy(gzw, hashReader)
		if err != nil {
			logrus.Warnf("failed when copying to gzip: %s", err)
			pipeWriter.CloseWithError(err)
			return
		}
		gzw.Close()
		pipeWriter.Close()
	}()

	layerDigest, layerSize, err := engine.PutBlob(context.Background(), pipeReader)
	if err != nil {
		return errors.Wrap(err, "put layer blob")
	}
	reader.Close()
	// XXX: Should we defer a DeleteBlob?

	layerDiffID := fmt.Sprintf("%s:%x", cas.BlobAlgorithm, diffIDHash.Sum(nil))

	layerDescriptor := &v1.Descriptor{
		// FIXME: This should probably be configurable, so someone can specify
		//        that a layer is not distributable.
		MediaType: v1.MediaTypeImageLayer,
		Digest:    layerDigest,
		Size:      layerSize,
	}

	logrus.WithFields(logrus.Fields{
		"digest": layerDigest,
		"size":   layerSize,
	}).Debugf("umoci: generated new diff layer")

	manifestBlob, err := cas.FromDescriptor(context.Background(), engine, &meta.From)
	if err != nil {
		return errors.Wrap(err, "get manifest blob")
	}
	defer manifestBlob.Close()

	logrus.WithFields(logrus.Fields{
		"digest": manifestBlob.Digest,
	}).Debugf("umoci: got original manifest")

	manifest, ok := manifestBlob.Data.(*v1.Manifest)
	if !ok {
		// Should never be reached.
		return errors.Errorf("manifest blob type not implemented: %s", manifestBlob.MediaType)
	}

	// We also need to update the config. Fun.
	configBlob, err := cas.FromDescriptor(context.Background(), engine, &manifest.Config)
	if err != nil {
		return errors.Wrap(err, "get config blob")
	}
	defer configBlob.Close()

	logrus.WithFields(logrus.Fields{
		"digest": configBlob.Digest,
	}).Debugf("umoci: got original config")

	config, ok := configBlob.Data.(*v1.Image)
	if !ok {
		// Should not be reached.
		return errors.Errorf("config blob type not implemented: %s", configBlob.MediaType)
	}

	g, err := igen.NewFromImage(*config)
	if err != nil {
		return err
	}

	// Append our new layer to the set of DiffIDs.
	g.AddRootfsDiffID(layerDiffID)

	var (
		author    = g.Author()
		comment   = fmt.Sprintf("repack diffid %s", layerDiffID)
		created   = time.Now().Format(igen.ISO8601)
		createdBy = "umoci repack" // XXX: should we append argv to this?
	)

	if val, ok := ctx.App.Metadata["--history.author"]; ok {
		author = val.(string)
	}
	if val, ok := ctx.App.Metadata["--history.comment"]; ok {
		comment = val.(string)
	}
	if val, ok := ctx.App.Metadata["--history.created"]; ok {
		created = val.(string)
	}
	if val, ok := ctx.App.Metadata["--history.created_by"]; ok {
		createdBy = val.(string)
	}

	// We need to add a history entry here, since a lot of tooling depends on
	// the EmptyLayer == false semantics of Docker's history.
	g.AddHistory(v1.History{
		Created:    created,
		CreatedBy:  createdBy,
		Author:     author,
		Comment:    comment,
		EmptyLayer: false,
	})

	// Update config and create a new blob for it.
	*config = g.Image()
	newConfigDigest, newConfigSize, err := engine.PutBlobJSON(context.Background(), config)
	if err != nil {
		return errors.Wrap(err, "put config blob")
	}

	logrus.WithFields(logrus.Fields{
		"digest": newConfigDigest,
		"size":   newConfigSize,
	}).Debugf("umoci: added new config")

	// Update the manifest to include the new layer, and also point at the new
	// config. Then create a new blob for it.
	manifest.Layers = append(manifest.Layers, *layerDescriptor)
	manifest.Config.Digest = newConfigDigest
	manifest.Config.Size = newConfigSize
	newManifestDigest, newManifestSize, err := engine.PutBlobJSON(context.Background(), manifest)
	if err != nil {
		return errors.Wrap(err, "put manifest blob")
	}

	logrus.WithFields(logrus.Fields{
		"digest": newManifestDigest,
		"size":   newManifestSize,
	}).Debugf("umoci: added new manifest")

	// Now create a new reference, and either add it to the engine or spew it
	// to stdout.

	newDescriptor := &v1.Descriptor{
		// FIXME: Support manifest lists.
		MediaType: v1.MediaTypeImageManifest,
		Digest:    newManifestDigest,
		Size:      newManifestSize,
	}

	logrus.WithFields(logrus.Fields{
		"mediatype": newDescriptor.MediaType,
		"digest":    newDescriptor.Digest,
		"size":      newDescriptor.Size,
	}).Infof("created new layout")

	// We have to clobber the old reference.
	// XXX: Should we output some warning if we actually did remove an old
	//      reference?
	if err := engine.DeleteReference(context.Background(), tagName); err != nil {
		return err
	}
	if err := engine.PutReference(context.Background(), tagName, newDescriptor); err != nil {
		return err
	}

	return nil
}
